@model GeoSearch.Models.SearchModel

@{
    ViewBag.Title = "Search Locations";
}

<div class="search-container">
    <form action="@Url.Action("FindLocations", "Home")" method="get" class="input-group">
        @Html.TextBoxFor(m => m.Location, new { @class = "form-control search-input", placeholder = "Search Locations..." })
        <input id="latitude" name="Latitude" type="hidden" />
        <input id="longitude" name="Longitude" type="hidden" />
        @* <input id="limit" name="limit" type="hidden" /> *@
        <button type="submit" class="btn btn-secondary search-button">
            <i class="fa fa-search"></i>
        </button>
    </form>
    @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
    {
        <p class="alert-message"><i>@ViewBag.ErrorMessage</i></p>
    }
</div>

<div id="map"></div>

<script>
    function initializeMap() {
        var map = L.map('map', {
            zoomControl: false
        }).setView([51.505, -0.09], 13);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);
        L.control.zoom({
            position: 'bottomright'
        }).addTo(map);
        map.on('drag', function () {
            updateFormWithCoordinates(map);
        });
        updateFormWithCoordinates(map);
        return map;
    }
    function updateFormWithCoordinates(map) {
        var center = map.getCenter();
        document.getElementById('latitude').value = center.lat;
        document.getElementById('longitude').value = center.lng;
    }
    function addMarkerToMap(map, place) {
        var latitude = place?.geocodes?.main?.latitude;
        var longitude = place?.geocodes?.main?.longitude;
        var placeId = place?.fsq_id;

        var marker = L.marker([latitude, longitude]).addTo(map);
        addActionToMarker(marker, placeId);
        bindPopupToMarker(marker, place);
        addHoverEffect(marker);
        return marker;
    }

    function addActionToMarker(marker, placeId) {
        marker.on('click', function () {
            window.location.href = '/Place/Details/' + placeId;
        });
    }

    function bindPopupToMarker(marker, place) {
        var placeName = place?.name;
        var placeId = place?.fsq_id;
        var address = place?.location?.formatted_Address;
        var categories = place?.categories;
        console.log(place?.location);
        var popupContent = `
        <div class="popup-content">
            <div>
                <div class="header-actions">
                    <form method="post" action="@Url.Action("AddAsFavorite", "Place")">
                        <input type="hidden" name="FsqId" value="${placeId}" />
                        <input type="hidden" name="Name" value="${placeName}" />
                        <input type="hidden" name="Address" value="${address}" />
                        <button type="submit" class="btn">
                            <i class="fa fa-star fa-lg text-warning icon-action"></i>
                        </button>
                    </form>
                    <h4>${placeName}</h4>
                </div>
                <p><i>${address}</i></p>
                <div>
                    ${generateCategoryIcons(categories)}
                </div>
            </div>
            <div class="popup-actions">
                <a href="/Place/Details/${placeId}">
                    See more...
                </a>
            </div>
        </div>
    `;

      marker.bindPopup(popupContent);
    }

    function generateCategoryIcons(categories) {
        return categories.map(category => {
            const iconPrefix = category?.icon?.prefix;
            const iconSuffix = category?.icon?.suffix;
            const iconUrl = iconPrefix + '32' + iconSuffix;
        
            return `<img src="${iconUrl}" alt="${category?.short_name}" class="img-icon"/>`;
        }).join('');
    }

    function addHoverEffect(marker) {
        marker.on('mouseover', function () {
            this.openPopup();

            var popup = this.getPopup();
            setTimeout(function () {
                popup._close();
            }, 10000);  // 10000 milliseconds = 10 seconds
        });
    }

    function addMarkersToMap(map, places) {
        var markerPositions = [];

        places.forEach(function (place) {
            var latitude = place?.geocodes?.main?.latitude;
            var longitude = place?.geocodes?.main?.longitude;
            var placeName = place?.name;
            var placeId = place?.fsq_id;

            var marker = addMarkerToMap(map, place);
            markerPositions.push([latitude, longitude]);
        });

        return markerPositions;
    }

    function setMapView(map, geoBounds) {
        if (geoBounds && geoBounds.circle) {
            var center = geoBounds.circle.center;
            map.setView(new L.LatLng(center.latitude, center.longitude), 3);
        }
    }

    function fitMapToMarkers(map, markerPositions) {
        if (markerPositions.length > 0) {
            var bounds = L.latLngBounds(markerPositions);
            map.fitBounds(bounds);
        }
    }

    function loadMap() {
        var map = initializeMap();
        var places = @Html.Raw(Json.Serialize(Model.Response.Results));
        if (places != null && places.length > 0) {
            var markerPositions = addMarkersToMap(map, places);
            var geoBounds = @Html.Raw(Json.Serialize(Model.Response.Context?.Geo_bounds));

            setMapView(map, geoBounds);
            fitMapToMarkers(map, markerPositions);
        } else {
            console.log("No places found.");
        }
    }

    loadMap();
    
</script>
